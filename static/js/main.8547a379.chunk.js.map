{"version":3,"sources":["Redux/constants/index.js","Redux/reducers/jsonPlaceHolderReducer.js","Redux/reducers/index.js","Redux/store/index.js","Components/appBar.js","App.js","serviceWorker.js","index.js"],"names":["SAVE_JSON_PLACEHOLDER","CLEAR_JSON_PLACEHOLDER","initialState","jsonAxiosGetResult","pageNoReceived","nextPageTocall","contents","initContents","rootReducer","combineReducers","jsonPlaceHolderReducer","state","action","type","payload","page","content","parseInt","filter","name","includes","store","createStore","applyMiddleware","thunkMiddleware","useStyles","makeStyles","theme","root","flexGrow","margin","backgroundColor","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","AppBarComp","memo","props","classes","dispatch","useDispatch","id","className","AppBar","style","Toolbar","IconButton","edge","aria-label","Typography","variant","noWrap","InputBase","input","inputProps","onChange","e","value","target","marginTop","Page1","lazy","App","window","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8547a379.chunk.js","sourcesContent":[" const OPEN_TOAST = 'OPEN_TOAST'\n const SAVE_JSON_PLACEHOLDER = 'SAVE_JSON_PLACEHOLDER'\n const LOGIN_STATE = 'LOGIN_STATE'\nconst CLEAR_JSON_PLACEHOLDER = 'CLEAR_JSON_PLACEHOLDER'\n\nexport {\n    CLEAR_JSON_PLACEHOLDER,\n    OPEN_TOAST,\n    SAVE_JSON_PLACEHOLDER,\n    LOGIN_STATE\n}","import {\n  SAVE_JSON_PLACEHOLDER,\n  CLEAR_JSON_PLACEHOLDER\n  } from '../constants'\n  \n  const initialState = {\n    jsonAxiosGetResult:[],\n    pageNoReceived:0,\n    nextPageTocall:1,\n    contents:[],\n    initContents:[]\n  }\n  \n  export default function jsonPlaceHolderReducer(state = initialState,action) {\n    const {type,payload} = action || {}\n    switch (type) {\n        case SAVE_JSON_PLACEHOLDER:{\n          const {initContents} = state\n          let {page:{'page-num-requested':pageNoReceived, 'content-items':{content=[]}={}}={}}= payload\n           const contents = [...initContents,...content]\n          pageNoReceived = parseInt(pageNoReceived)\n          const nextPageTocall = pageNoReceived + 1\n\n        return {\n          ...state,\n          jsonAxiosGetResult: payload,\n          pageNoReceived,\n          nextPageTocall,\n          contents,\n          initContents: contents\n        }\n      }\n      case 'SEARCH_CONTENTS' :{\n        let {contents} = state\n        const {initContents} = state\n        contents = initContents\n        if(payload)contents = contents.filter(({name})=>name.includes(payload))\n        \nreturn {\n  ...state,\n  contents\n}\n      }\n\n        case CLEAR_JSON_PLACEHOLDER:{\n        return {\n          ...state,\n          jsonAxiosGetResult: []\n        }\n      }\n\n      default:\n        return state\n    }\n  }\n  ","import { combineReducers } from 'redux'\nimport jsonPlaceHolderReducer from './jsonPlaceHolderReducer'\n\n\nconst rootReducer = combineReducers({\n    jsonPlaceHolderReducer\n  })\n  \n  export default rootReducer","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from '../reducers'\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\n\nexport default store","import React,{memo} from 'react';\nimport { useDispatch } from 'react-redux'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin:10,\n    backgroundColor:'black'\n    // position: 'fixed'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    // backgroundColor: 'black',\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  inputRoot: {\n    color: 'white',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n}));\n\n\nconst AppBarComp = memo((props)=> {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n        const onChange = (e) => {\n            const {target:{value}} = e || {}\n            dispatch({type:'SEARCH_CONTENTS',payload : value})\n        }\n    return (\n        <div id = 'myHeader' className={classes.root}>\n          <AppBar position=\"fixed\" style={{backgroundColor:'black'}}>\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n              >\n                <ArrowBackIcon />\n              </IconButton>\n              <Typography className={classes.title} variant=\"h6\" noWrap>\n                Romantic Comedy\n              </Typography>\n              <div className={classes.search}>\n                <InputBase\n                //   placeholder=\"Searchâ€¦\"\n                  classes={{\n                      root: classes.inputRoot,\n                      input: classes.inputInput,\n                    }}\n                  inputProps={{ 'aria-label': 'search' }}\n                  onChange={onChange}\n                />\n                    <SearchIcon style = {{marginTop:15}}/>\n              </div>\n            </Toolbar>\n          </AppBar>\n        </div>\n      );\n})\n\nexport default AppBarComp\n\n","\nimport React, { memo,lazy, Suspense } from 'react'\nimport { Provider } from 'react-redux'\nimport './App.css';\nimport store from './Redux/store'\nimport AppBarComp from './Components/appBar'\nconst Page1 = lazy(()=>import('./Components/page1'));\n\nconst App = memo((props) => {\n  window.store = store\n\n  return (\n    <Provider store={store}>\n    <div className=\"App\" >\n    <AppBarComp />\n    <Suspense fallback={<div>Loading.....</div>}>\n      <Page1 />\n      </Suspense>\n    </div>\n    </Provider>\n  )\n})\n\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}